#!/usr/bin/env ruby

require 'pp'
require 'uri'
require 'json'
require 'oauth2'
require 'webrick'
require 'optparse'

options = {}
required = []

src = File.basename($PROGRAM_NAME)
state = ('a'..'z').to_a.sample(32).join
path = '/oauth/callback'

optp = OptionParser.new do |opts|
  opts.banner = "Usage: #{src} --auth AUTHORISATION_URL --token TOKEN_URL "\
    "--id CLIENT_ID --secret CLIENT_SECRET\n\n"

  required << :auth
  desc_auth = 'Authorisation URL (required)'
  opts.on('-a', '--auth AUTHORISATION_URL', desc_auth) do |opt|
    options[:auth] = opt
  end

  required << :token
  opts.on('-t', '--token TOKEN_URL', 'Token URL (required)') do |opt|
    options[:token] = opt
  end

  required << :id
  opts.on('-i', '--id CLIENT_ID', 'Client ID (required)') do |opt|
    options[:id] = opt
  end

  required << :secret
  opts.on('-s', '--secret CLIENT_SECRET', 'Client secret (required)') do |opt|
    options[:secret] = opt
  end

  options[:scope] = []
  desc_scope = 'OAuth2 scope to authorise (not used if not specified)'
  opts.on('-o', '--scope SCOPE1,SCOPE2,etc', Array, desc_scope) do |opt|
    options[:scope] = opt
  end

  options[:separator] = ' '
  desc_separator = 'OAuth2 scope separator character (defaults to space) n.b '\
    'the scope arg is always passed as array and joined with the separator '\
    'char for the request'
  opts.on('-e', '--separator SEPARATOR', desc_separator) do |opt|
    options[:separator] = opt
  end

  options[:host] = '127.0.0.1'
  desc_host = 'Callback host (defaults to 127.0.0.1) n.b this allows you to '\
    'run this tool on a remote machine and have the authorisation code go '\
    'there; the callback HTTP server always binds to all available network '\
    'interfaces irrespective of this value'
  opts.on('-h', '--host 127.0.0.1', String, desc_host) do |opt|
    options[:host] = opt
  end

  options[:port] = 8000
  desc_port = 'Callback port (defaults to 8000)'
  opts.on('-p', '--port 8000', Integer, desc_port) do |opt|
    options[:port] = opt
  end

  options[:write] = false
  desc_write = 'Write the returned token as JSON using TOKEN_URL host as '\
  'filename with the current working directory being the destination'
  opts.on('-w', '--write', desc_write) do
    options[:write] = true
  end

  options[:audience] = nil
  desc_audience = 'The token audience, not used if unspecified (optional)'
  opts.on('-u', '--audience AUDIENCE', desc_audience) do |opt|
    options[:audience] = opt
  end

  options[:debug] = false
  opts.on('-d', '--debug', 'Turn on OAuth2 library debug and WEBrick log') do
    ENV['OAUTH_DEBUG'] = 'true'
    options[:debug] = true
  end
end

begin
  optp.parse!
rescue OptionParser::MissingArgument => err
  STDERR.puts err
  exit 1
end

required.each do |arg|
  next unless options[arg].nil?

  STDERR.puts "Error: missing required argument #{arg}. "\
    "See #{src} --help for help."
  exit 1
end

token_uri = URI(options[:token])
redirect_uri = "http://#{options[:host]}:#{options[:port]}#{path}"
client = OAuth2::Client.new(
  options[:id],
  options[:secret],
  authorize_url: options[:auth],
  token_url: options[:token]
)

code_args = {
  access_type: 'offline',
  redirect_uri: redirect_uri,
  state: state
}

unless options[:scope].empty?
  code_args[:scope] = options[:scope].join(options[:separator])
end

code_args[:audience] = options[:audience] unless options[:audience].nil?

url = client.auth_code.authorize_url(code_args)

puts ''
puts "Go to URL: #{url}"
puts ''

puts 'Starting server - use Ctrl+C to stop'
puts ''

server_options = {
  Port: options[:port]
}

unless options[:debug]
  server_options[:Logger] = WEBrick::Log.new(File.open(File::NULL, 'w'))
  server_options[:AccessLog] = []
end

server = WEBrick::HTTPServer.new(server_options)

server.mount_proc('/') do |req, res|
  unless req.path == path
    res.status = 403
    res.body = "Invalid callback path - expecting #{path}"
    next
  end

  unless req.query['state'] == state
    res.status = 400
    res.body = 'Invalid state in callback'
    next
  end

  token = client.auth_code.get_token(
    req.query['code'],
    redirect_uri: redirect_uri
  )

  pp token.to_hash
  puts ''

  File.write("#{token_uri.host}.json", token.to_hash.to_json) if options[:write]

  res.status = 200
  res.body = 'You may now close this tab'
end

trap('INT') do
  server.shutdown
end

server.start
